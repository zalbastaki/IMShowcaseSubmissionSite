{{!< default}}

{{!-- selectr --}}
<link href="https://cdn.jsdelivr.net/gh/mobius1/selectr@latest/dist/selectr.min.css" rel="stylesheet" type="text/css">
<script src="https://cdn.jsdelivr.net/gh/mobius1/selectr@latest/dist/selectr.min.js" type="text/javascript"></script>

{{!-- loads custom web elements polyfill --}}
<script src="https://unpkg.com/@webcomponents/custom-elements"></script>

{{!-- page construction begins --}}
<div class="page">
    <div class="page-container">
        <form id="submission-form" enctype="multipart/form-data">
        <input type="hidden" name="action">

		{{#if project}}<input type="hidden" name="projectId" value="{{project._id}}">{{/if}}

		<p class="page-heading">{{#if project}}{{project.title}}{{else}}New Submission{{/if}}</p>

        <input id="who" class="tab-radio" type="radio" name="tabs" checked="checked">
        <input id="what" class="tab-radio" type="radio" name="tabs">
        <input id="details" class="tab-radio" type="radio" name="tabs">
        <input id="tech" class="tab-radio" type="radio" name="tabs">
        <input id="code" class="tab-radio" type="radio" name="tabs">

        <div class="progressbar-container">
            <ul class="progressbar">
                <li id="who-step"><label for="who">Who?</label></li>
                <li id="what-step"><label for="what">What?</label></li>
                <li id="details-step"><label for="details">Details</label></li>
                <li id="tech-step"><label for="tech">Showcase</label></li>
                <li id="code-step"><label for="code">Project</label></li>
            </ul>
        </div>
        
        <div id="who-content">
			<im-text-input input-id="teamMembers" input-name="teamMembers" input-value="{{project.teamMembers}}" label="team members (if any)"></im-text-input>
			<div class="input-note">Note: Comma-separated list.</div>
			<im-text-input input-id="webLinks" input-name="webLinks" input-value="{{project.webLinks}}" label="web links (if any)"></im-text-input>
			<div class="input-note">Note: Comma-separated list.</div>
            
            <div class="nav-buttons">
                <div></div>
                <label for="what" class="next-button"><i class="fas fa-chevron-right"></i></label>
            </div>
        </div>
        
        <div id="what-content">
            <im-text-input input-id="title" input-name="title" input-value="{{project.title}}" label="title" input-required="true"></im-text-input>
            <im-textarea-input input-id="description" input-name="description" input-value="{{project.description}}" label="description" input-required="true"></im-textarea-input>

            <div class="nav-buttons">
                <label for="who" class="back-button"><i class="fas fa-chevron-left"></i></label>
                <label for="details" class="next-button"><i class="fas fa-chevron-right"></i></label>
            </div>
        </div>

        <div id="details-content">
            <im-text-input input-id="contentWarnings" input-name="contentWarnings" input-value="{{project.contentWarnings}}" label="content warnings"></im-text-input>
            <im-textarea-input input-id="instructions" input-name="instructions" input-value="{{project.instructions}}" label="instructions"></im-textarea-input>

            <div class="nav-buttons">
                <label for="what" class="back-button"><i class="fas fa-chevron-left"></i></label>
                <label for="tech" class="next-button"><i class="fas fa-chevron-right"></i></label>
            </div>
        </div>
        
        <div id="tech-content">
            <im-text-input input-id="accessibility" input-name="accessibility" input-value="{{project.accessibility}}" label="accessibility considerations"></im-text-input>
			<label for="devicesNeeded" class="select-input-label">device needed during showcase</label>
			<select id="devicesNeeded" name="devicesNeeded" multiple required oninvalid="showError()">
				{{#each devices}}
					<option value="{{id}}" {{#ifDeviceNeeded id}}selected{{/ifDeviceNeeded}}>{{device}}</option>
				{{/each}}
			</select>
			<div class="select-input-required">Required</div>
            
            <div class="nav-buttons">
                <label for="details" class="back-button"><i class="fas fa-chevron-left"></i></label>
                <label for="code" class="next-button"><i class="fas fa-chevron-right"></i></label>
            </div>
        </div>
        
        <div id="code-content">
			<im-file-input input-id="video" input-name="video" input-accept="video/*" label="video"></im-file-input>
			{{#if project.video.url}}
            	<div class="file-preview-container">
					<a class="file-preview" id="videoPreview" href="{{project.video.url}}">Current upload (click to download)</a>
					<label class="file-remove-icon" for="videoDelete"><i class="fas fa-times-circle"></i></label>
				</div>
				<input type="checkbox" class="file-remove-input" name="videoDelete" id="videoDelete">
				<div class="file-remove-res" id="videoDeleteRes">Click submit to remove the file, or <label class="file-remove-undo" for="videoDelete">click here to undo</label>.</div>
			{{/if}}
            <im-file-input input-id="sourceCode" input-name="sourceCode" input-accept=".zip" label="source code" {{#unless project.sourceCode.url}}input-required="true"{{/unless}}></im-file-input>
			{{#if project.sourceCode.url}}
            	<div class="file-preview-container">
					<a class="file-preview" id="sourceCodePreview" href="{{project.sourceCode.url}}">Current upload (click to download)</a>
				</div>
				<div class="file-preview-note">This file cannot be removed because this field is required. Try to upload a new file instead.</div>
			{{/if}}

			<div class="confirmation">
				<input type="checkbox" id="isValid" name="isValid" checked="{{project.isValid}}" required>
				<label for="isValid"> I confirm that this project was made during the 2019-2020 academic year.</label>
				<br>
				<input type="checkbox" id="sharePermission" name="sharePermission" checked="{{project.sharePermission}}">
				<label for="sharePermission"> I give permission to share this project online.</label>
			</div>

            <div class="nav-buttons">
                <label for="tech" class="back-button"><i class="fas fa-chevron-left"></i></label>
                <div></div>
            </div>
        </div>

		<div id="error-message">Oops, something's wrong with your submission. Make sure you filled out all the required fields.</div>

		<div id="loader-container">
			<div id="loader"></div>
			Loading...
		</div>

		<div class="buttons-container" id="submission-buttons">
			<button type="submit" id="submit-btn" class="button" disabled>{{#if project}}Update{{else}}Submit{{/if}}</button>
			<a class="button button-margin" href="/dashboard">Cancel</a>
		</form>
		</div>
    	
    </div>
</div>

{{!-- template used for custom text input tag --}}
<template id="t-im-text-input">
  <input type="text" class="text-input" placeholder=" " oninvalid="showError()">
  <label class="text-input-label"></label>
  <div class="text-input-line-animation"></div>
  <div class="text-input-required">Required</div>
</template>

{{!-- template used for custom textarea input tag --}}
<template id="t-im-textarea-input">
    <label class="textarea-input-label"></label>
    <textarea class="textarea-input" placeholder=" " oninvalid="showError()"></textarea>
    <div class="textarea-input-line-animation"></div>
    <div class="textarea-input-required">Required</div>
</template>

{{!-- template used for custom file input tag --}}
<template id="t-im-file-input">
  <label class="file-input-label"></label>
  <input type="file" class="file-input" oninvalid="showError()">
  <div class="file-input-max">Note: the maximum file size is 20GB. Attempting to upload a larger file will crash the server.</div>
  <div class="file-input-required">Required</div>
</template>

{{!-- define custom web elements --}}
<script>
    class IMTextInput extends HTMLElement {
        constructor() {
            super(); //required
            
            var t = document.getElementById('t-im-text-input'); //get the template of the custom tag
            var input = t.content.querySelector('input');
            var label = t.content.querySelector('label');
            
            input.id = this.getAttribute('input-id'); //use input-id attribute to set the input's id
            input.name = this.getAttribute('input-name'); //use input-name attribute to set input's name
            input.value = this.getAttribute('input-value'); //use input-value attribute to set input's value
            input.removeAttribute('required');
            if (this.getAttribute('input-required') === "true") { //if input-require is true, set input to be required
                input.required = true;
            }
            label.setAttribute('for', this.getAttribute('input-id')); //use input-id attribute to set the label's for attribute
            label.innerText = this.getAttribute('label'); //use label attribute to set the inner text of the label tag

            var clone = document.importNode(t.content, true);
            this.appendChild(clone);
        }
    }
    window.customElements.define('im-text-input', IMTextInput);

    class IMTextareaInput extends HTMLElement {
        constructor() {
            super(); //required

            var t = document.getElementById('t-im-textarea-input');
            var input = t.content.querySelector('textarea');
            var label = t.content.querySelector('label');

            input.id = this.getAttribute('input-id');
            input.name = this.getAttribute('input-name');
            input.innerText = this.getAttribute('input-value');
            input.removeAttribute('required');
            if (this.getAttribute('input-required') === "true") {
                input.required = true;
            }
            label.setAttribute('for', this.getAttribute('input-id'));
            label.innerText = this.getAttribute('label');

            var clone = document.importNode(t.content, true);
            this.appendChild(clone);
        }
    }
    window.customElements.define('im-textarea-input', IMTextareaInput);

	class IMFileInput extends HTMLElement {
		constructor() {
			super();

			var t = document.getElementById('t-im-file-input');
			var input = t.content.querySelector('input');
			var label = t.content.querySelector('label');

			input.id = this.getAttribute('input-id');
			input.name = this.getAttribute('input-name');
			input.accept = this.getAttribute('input-accept');
			input.removeAttribute('required');
            if (this.getAttribute('input-required') === "true") {
                input.required = true;
            }
            label.setAttribute('for', this.getAttribute('input-id'));
            label.innerText = this.getAttribute('label');

            var clone = document.importNode(t.content, true);
            this.appendChild(clone);
		}
	}
	window.customElements.define('im-file-input', IMFileInput);

	new Selectr('#devicesNeeded', {
		multiple: true,
		searchable: true,
		allowDeselect: true,
	});

	function showError() {
		document.getElementById('error-message').style.display = "block";
	}
</script>

{{!-- form submission --}}
<script>
	const form = document.getElementById('submission-form');
	const loader = document.getElementById('loader-container');
	const buttons = document.getElementById('submission-buttons');
	
	form.addEventListener("submit", submitForm);

	function submitForm (e) {
		e.preventDefault();

		buttons.style.display = "none";
		loader.style.display = "flex";

		const xhr = new XMLHttpRequest();

		xhr.onreadystatechange = function() {
			if (xhr.readyState === XMLHttpRequest.DONE) {
				window.location.href = xhr.status === 200 ? "/submission-success" : "/submission-fail";
			}
		}

		xhr.open("POST", "/api/submission");

		xhr.send(new FormData(form));
	}
</script>

{{!-- submit button controls --}}
<script>
	const requiredFields = form.querySelectorAll("[required]");
	const submitBtn = document.getElementById("submit-btn");

	requiredFields.forEach(field => {
		controlSubmitBtn();
		field.addEventListener("input", controlSubmitBtn);
		field.addEventListener("change", controlSubmitBtn);
	});

	function controlSubmitBtn () {
		requiredFields.forEach(field => {
			submitBtn.disabled = field.type === "checkbox" ? !field.checked : !field.value;
		});
	};
</script>
